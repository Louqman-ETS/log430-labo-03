name: CI / CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.9"
      - name: Install linters
        run: pip install black==24.4.2
      - name: Run black (checkâ€‘only)
        run: black --check .

  test-flask-app:
    name: Test Flask App
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: store_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://user:password@localhost:5432/store_db" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "API_TOKEN=test" >> $GITHUB_ENV
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Initialize test database
        run: |
          PYTHONPATH=./src python -m src.create_db
      - name: Run application tests
        run: |
          PYTHONPATH=./src pytest tests/test_app.py tests/test_functionality.py tests/test_config.py

  test-fastapi:
    name: Test FastAPI
    runs-on: ubuntu-latest
    needs: test-flask-app
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Test with pytest
      env:
        API_TOKEN: "test-token-from-ci"
        DATABASE_URL: "sqlite:///./test_ci.db" # Use an in-memory SQLite for API tests
        PYTHONPATH: "."
      run: |
        pytest tests/api/v1/

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-fastapi
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/log430-labo-03

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
