name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.9"
      - name: Install linters
        run: pip install black==24.4.2
      - name: Run black (check-only)
        run: black --check .

  test-flask-app:
    name: Test Flask App
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: store_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create logs directory
        run: mkdir -p logs
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://user:password@localhost:5432/store_db" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Initialize test database
        run: |
          PYTHONPATH=./src python -m src.create_db
      - name: Run Flask application tests
        run: |
          PYTHONPATH=./src pytest tests/test_app.py tests/test_functionality.py tests/test_config.py

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    needs: test-flask-app
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: store_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create logs directory
        run: mkdir -p logs
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://user:password@localhost:5432/store_db" >> $GITHUB_ENV
          echo "API_TOKEN=test-token-for-ci" >> $GITHUB_ENV
          echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Initialize test database
        run: |
          PYTHONPATH=./src python -m src.create_db
      - name: Run API tests
        env:
          PYTHONPATH: "."
        run: |
          pytest tests/api/v1/

  build-and-push-flask:
    name: Build and Push Flask App
    runs-on: ubuntu-latest
    needs: test-api
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata for Flask app
        id: meta-flask
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/log430-web

      - name: Build and push Flask app image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfile.flask
          push: true
          tags: ${{ steps.meta-flask.outputs.tags }}
          labels: ${{ steps.meta-flask.outputs.labels }}

  build-and-push-api:
    name: Build and Push API
    runs-on: ubuntu-latest
    needs: build-and-push-flask
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/log430-api

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfile.api
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
